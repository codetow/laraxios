{"mappings":"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","sources":["src/types.ts","src/utils.ts","src/axios-instance.ts","src/request.ts","src/laraxios.ts"],"sourcesContent":["import { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios'\n\nexport interface LaraxiosRequestConfig extends AxiosRequestConfig {\n  errorHandler?: undefined | ErrorHandlerCallback\n}\n\nexport interface LaraxiosInstance {\n  request: (config?: LaraxiosRequestConfig) => Promise<ApiResponse>;\n  get: (url: string, config?: LaraxiosRequestConfig) => Promise<ApiResponse>;\n  post: (url: string, data?: RequestData, config?: LaraxiosRequestConfig) => Promise<ApiResponse>;\n  put: (url: string, data?: RequestData, config?: LaraxiosRequestConfig) => Promise<ApiResponse>;\n  patch: (url: string, data?: RequestData, config?: LaraxiosRequestConfig) => Promise<ApiResponse>;\n  delete: (url: string, data?: RequestData, config?: LaraxiosRequestConfig) => Promise<ApiResponse>;\n  sanctum: {\n    csrf: (url?: string) => Promise<ApiResponse> | void\n  }\n}\n\nexport type RequestDataValue =\n  Array<number | string | boolean | Blob>\n  | string\n  | number\n  | boolean\n  | Blob\n\nexport type RequestData = { [key: string]: RequestDataValue }\n\nexport enum LaravelMethod {\n  GET = 'get',\n  POST = 'post',\n  DELETE = 'delete'\n}\n\nexport type ApiResponse = AxiosResponse\n\nexport interface ErrorHandlerCallback {\n  (error: AxiosError): void\n}\n","import { LaravelMethod, LaraxiosRequestConfig, RequestData, RequestDataValue, } from './types'\nimport { AxiosRequestConfig } from 'axios'\n\n/**\n * Define baseURL for api based on a slash character as a first character.\n * @param config\n */\nexport const formatURL = (config: LaraxiosRequestConfig): string | undefined => {\n  const baseURL = config.baseURL?.trim()\n  if (baseURL?.length && config.url && config.url[0] === '/') {\n    const { origin } = new URL(baseURL)\n    return `${origin}`\n  }\n\n  return config.baseURL\n}\n\n/**\n * Convert regular values to acceptable FormData values.\n * @param data\n */\nexport const convertToFormData = (data: RequestData | undefined): FormData => {\n  /**\n   * Change the type of data.\n   * @param val\n   */\n  const changeType = (val: RequestDataValue) => {\n    if (val instanceof Blob) {\n      return val\n    } else if (typeof val === 'boolean') {\n      return val ? '1' : '0'\n    } else {\n      return `${val}`\n    }\n  }\n\n  const formData = new FormData()\n\n  if (data) {\n    Object.entries(data)\n      .forEach(([key, value]) => {\n        // Iterate if array\n        if (Array.isArray(value)) {\n          value.forEach((val, index) => {\n            formData.append(`${key}[${index}]`, changeType(val))\n          })\n        } else {\n          formData.append(key, changeType(value))\n        }\n      })\n  }\n\n  return formData\n}\n\n/**\n * Format the config that suits Laravel.\n * @param config\n */\nexport const requestFormatter = (config: LaraxiosRequestConfig): AxiosRequestConfig => {\n  let data = {}\n  let method = LaravelMethod.GET\n  // Set data according to the method...\n  if (config.method === 'post' || config.method === 'put' || config.method === 'patch') {\n    const formData = convertToFormData(config.data)\n    // Laravel uses this field to recognize put and patch...\n    formData.append('_method', config.method)\n    data = formData\n    method = LaravelMethod.POST\n  } else if (config.method === 'delete') {\n    data = {}\n    method = LaravelMethod.DELETE\n  }\n\n  const newConfig = {\n    ...config,\n    ...{\n      method,\n      params: config.params || {},\n      data,\n    }\n  }\n\n  if (newConfig.baseURL) {\n    newConfig.baseURL = formatURL(config)\n  }\n\n  return newConfig\n}\n\n/**\n * Merge default configs with user configs.\n * @param config\n */\nexport const mergeConfig = (config: LaraxiosRequestConfig): LaraxiosRequestConfig => {\n  return {\n    ...{\n      errorHandler: (error) => console.error('LARAVEL API ERROR: ' + (error?.response?.statusText || 'Unknown')),\n    },\n    ...config\n  }\n}\n","import axios from 'axios'\n\nexport default axios.create({\n  withCredentials: true,\n  headers: {\n    Accept: 'application/json'\n  }\n})\n","import { ApiResponse, LaraxiosRequestConfig } from './types'\nimport axios from 'axios'\nimport { mergeConfig, requestFormatter } from './utils'\nimport axiosInstance from './axios-instance'\n\n/**\n * Base request.\n * @param config\n */\nconst request = async (config: LaraxiosRequestConfig): Promise<ApiResponse> => {\n  const c = mergeConfig(config)\n\n  // Get the error handler and then remove it from the config...\n  const errorHandler = c.errorHandler\n  delete c.errorHandler\n\n  try {\n    return await axiosInstance.request(requestFormatter(c))\n  } catch (error) {\n    if (axios.isAxiosError(error) && error.response && errorHandler) {\n      // Invoke error handler...\n      errorHandler(error)\n\n      // Resolve with error, since the error has been handled...\n      return Promise.resolve(error.response)\n    }\n\n    return Promise.reject(error)\n  }\n}\n\nexport default request\n","import { ApiResponse, LaraxiosInstance, LaraxiosRequestConfig, RequestData } from './types'\nimport laraxiosRequest from './request'\nimport { AxiosResponse } from 'axios'\n\nexport default (configuration?: LaraxiosRequestConfig): LaraxiosInstance => ({\n  request (config?: LaraxiosRequestConfig) {\n    return laraxiosRequest({ ...configuration, ...config })\n  },\n  /**\n   * GET Request.\n   * @param url\n   * @param config\n   */\n  get (url: string, config?: LaraxiosRequestConfig): Promise<AxiosResponse> {\n    return laraxiosRequest({\n      url,\n      method: 'get',\n      ...{ ...configuration, ...config }\n    })\n  },\n  /**\n   * POST Request.\n   * @param url\n   * @param data\n   * @param params\n   * @param config\n   */\n  post (url: string, data?: RequestData, params?: object, config?: LaraxiosRequestConfig): Promise<ApiResponse> {\n    return laraxiosRequest({\n      url,\n      data,\n      params,\n      method: 'post',\n      ...{ ...configuration, ...config }\n    })\n  },\n  /**\n   * PUT Request.\n   * @param url\n   * @param data\n   * @param params\n   * @param config\n   */\n  put (url: string, data?: RequestData, params?: object, config?: LaraxiosRequestConfig): Promise<ApiResponse> {\n    return laraxiosRequest({\n      url,\n      data,\n      params,\n      method: 'put',\n      ...{ ...configuration, ...config }\n    })\n  },\n  /**\n   * PATCH Request.\n   * @param url\n   * @param data\n   * @param params\n   * @param config\n   */\n  patch (\n    url: string,\n    data?: RequestData,\n    params?: object,\n    config?: LaraxiosRequestConfig\n  ): Promise<ApiResponse> {\n    return laraxiosRequest({\n      url,\n      data,\n      params,\n      method: 'patch',\n      ...{ ...configuration, ...config }\n    })\n  },\n  /**\n   * DELETE Request.\n   * @param url\n   * @param params\n   * @param config\n   */\n  delete (url: string, params?: object, config?: LaraxiosRequestConfig): Promise<ApiResponse> {\n    return laraxiosRequest({\n      url,\n      params,\n      method: 'delete',\n      ...{ ...configuration, ...config }\n    })\n  },\n  sanctum: {\n    /**\n     * Send /sanctum/csrf request.\n     * @param url\n     */\n    csrf (url?: string): Promise<ApiResponse> | void {\n      if (url) {\n        return laraxiosRequest({ ...configuration, baseURL: '', url })\n      }\n      if (configuration?.baseURL) {\n        return laraxiosRequest({ ...configuration, url: '/sanctum/csrf-cookie' })\n      }\n    }\n  }\n})\n"],"names":["$a3bd0ee6ac54316e$export$440ca1817514db88","LaravelMethod","$533342404bccfdc5$export$425a08012e9acdfa","config","data","method","GET","formData","changeType","val","Blob","FormData","Object","entries","forEach","key","value","Array","isArray","index","append","$533342404bccfdc5$export$697572e6b3df3226","POST","DELETE","newConfig","params","baseURL","trim","length","url","origin","URL","$533342404bccfdc5$export$b1ef46223b559f9d","$533342404bccfdc5$export$7ec1ebcfa9d8bd6a","errorHandler","error","console","response","statusText","$0afba911392481bb$export$2e2bcd8739ae039","$parcel$interopDefault","$gZfEI$axios","create","withCredentials","headers","Accept","$bc8328f848f8c457$export$2e2bcd8739ae039","async","c","request","isAxiosError","Promise","resolve","reject","$b1d238d470a483a0$export$2e2bcd8739ae039","configuration","get","post","put","patch","delete","sanctum","csrf"],"version":3,"file":"laraxios.js.map"}
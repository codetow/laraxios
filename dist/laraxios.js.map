{"mappings":"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","sources":["src/laraxios.ts","src/request.ts","src/utils.ts","src/types.ts"],"sourcesContent":["import { LaraxiosRequestConfig, RequestData } from './types'\r\nimport laraxiosRequest from './request'\r\nimport { AxiosStatic } from 'axios'\r\n\r\nexport default (axios: AxiosStatic, configuration?: LaraxiosRequestConfig) => ({\r\n  axiosInstance: axios.create({\r\n    withCredentials: true,\r\n    headers: {\r\n      Accept: 'application/json'\r\n    }\r\n  }),\r\n  request (config?: LaraxiosRequestConfig) {\r\n    return laraxiosRequest(axios, this.axiosInstance, { ...configuration, ...config })\r\n  },\r\n  /**\r\n   * GET Request.\r\n   * @param url\r\n   * @param config\r\n   */\r\n  get (url: string, config?: LaraxiosRequestConfig) {\r\n    return laraxiosRequest(axios, this.axiosInstance, {\r\n      url,\r\n      method: 'get',\r\n      ...{ ...configuration, ...config }\r\n    })\r\n  },\r\n  /**\r\n   * POST Request.\r\n   * @param url\r\n   * @param data\r\n   * @param config\r\n   */\r\n  post (url: string, data?: RequestData, config?: LaraxiosRequestConfig) {\r\n    return laraxiosRequest(axios, this.axiosInstance, {\r\n      url,\r\n      data,\r\n      method: 'post',\r\n      ...{ ...configuration, ...config }\r\n    })\r\n  },\r\n  /**\r\n   * PUT Request.\r\n   * @param url\r\n   * @param data\r\n   * @param config\r\n   */\r\n  put (url: string, data?: RequestData, config?: LaraxiosRequestConfig) {\r\n    return laraxiosRequest(axios, this.axiosInstance, {\r\n      url,\r\n      data,\r\n      method: 'put',\r\n      ...{ ...configuration, ...config }\r\n    })\r\n  },\r\n  /**\r\n   * PATCH Request.\r\n   * @param url\r\n   * @param data\r\n   * @param config\r\n   */\r\n  patch (\r\n    url: string,\r\n    data?: RequestData,\r\n    config?: LaraxiosRequestConfig\r\n  ) {\r\n    return laraxiosRequest(axios, this.axiosInstance, {\r\n      url,\r\n      data,\r\n      method: 'patch',\r\n      ...{ ...configuration, ...config }\r\n    })\r\n  },\r\n  /**\r\n   * DELETE Request.\r\n   * @param url\r\n   * @param config\r\n   */\r\n  delete (url: string, config?: LaraxiosRequestConfig) {\r\n    return laraxiosRequest(axios, this.axiosInstance, {\r\n      url,\r\n      method: 'delete',\r\n      ...{ ...configuration, ...config }\r\n    })\r\n  },\r\n  sanctum: {\r\n    /**\r\n     * Send /sanctum/csrf request.\r\n     * @param url\r\n     */\r\n    csrf (url?: string) {\r\n      if (url) {\r\n        return laraxiosRequest(axios, this.axiosInstance, { ...configuration, baseURL: '', url })\r\n      }\r\n      if (configuration?.baseURL) {\r\n        return laraxiosRequest(axios, this.axiosInstance, { ...configuration, url: '/sanctum/csrf-cookie' })\r\n      }\r\n    }\r\n  }\r\n})\r\n","import { LaraxiosRequestConfig, LaraxiosResponse } from './types'\r\nimport {AxiosInstance, AxiosStatic} from 'axios'\r\nimport { mergeConfig, requestFormatter } from './utils'\r\n\r\n/**\r\n * Base request.\r\n * @param axios\r\n * @param axiosInstance\r\n * @param config\r\n */\r\nconst request = async (axios: AxiosStatic, axiosInstance: AxiosInstance, config: LaraxiosRequestConfig): Promise<LaraxiosResponse> => {\r\n  const c = mergeConfig(config)\r\n\r\n  // Get the error handler and then remove it from the config...\r\n  const errorHandler = c.errorHandler\r\n  delete c.errorHandler\r\n\r\n  try {\r\n    return await axiosInstance.request(requestFormatter(c))\r\n  } catch (error) {\r\n    if (axios.isAxiosError(error) && error.response && errorHandler) {\r\n      // Invoke error handler...\r\n      errorHandler(error)\r\n\r\n      // Resolve with error, since the error has been handled...\r\n      return Promise.resolve(error.response)\r\n    }\r\n\r\n    return Promise.reject(error)\r\n  }\r\n}\r\n\r\nexport default request\r\n","import { LaravelMethod, LaraxiosRequestConfig, RequestData, RequestDataValue, } from './types'\r\nimport { AxiosRequestConfig } from 'axios'\r\n\r\n/**\r\n * Define baseURL for api based on a slash character as a first character.\r\n * @param config\r\n */\r\nexport const formatURL = (config: LaraxiosRequestConfig): string | undefined => {\r\n  const baseURL = config.baseURL?.trim()\r\n  if (baseURL?.length && config.url && config.url[0] === '/') {\r\n    const { origin } = new URL(baseURL)\r\n    return `${origin}`\r\n  }\r\n\r\n  return config.baseURL\r\n}\r\n\r\n/**\r\n * Convert regular values to acceptable FormData values.\r\n * @param data\r\n */\r\nexport const convertToFormData = (data: RequestData | undefined): FormData => {\r\n  /**\r\n   * Change the type of data.\r\n   * @param val\r\n   */\r\n  const changeType = (val: RequestDataValue) => {\r\n    if (val instanceof Blob) {\r\n      return val\r\n    } else if (typeof val === 'boolean') {\r\n      return val ? '1' : '0'\r\n    } else {\r\n      return `${val}`\r\n    }\r\n  }\r\n\r\n  const formData = new FormData()\r\n\r\n  if (data) {\r\n    Object.entries(data)\r\n      .forEach(([key, value]) => {\r\n        // Iterate if array\r\n        if (Array.isArray(value)) {\r\n          value.forEach((val, index) => {\r\n            formData.append(`${key}[${index}]`, changeType(val))\r\n          })\r\n        } else {\r\n          formData.append(key, changeType(value))\r\n        }\r\n      })\r\n  }\r\n\r\n  return formData\r\n}\r\n\r\n/**\r\n * Format the config that suits Laravel.\r\n * @param config\r\n */\r\nexport const requestFormatter = (config: LaraxiosRequestConfig): AxiosRequestConfig => {\r\n  let data = {}\r\n  let method = LaravelMethod.GET\r\n  // Set data according to the method...\r\n  if (config.method === 'post' || config.method === 'put' || config.method === 'patch') {\r\n    const formData = convertToFormData(config.data)\r\n    // Laravel uses this field to recognize put and patch...\r\n    formData.append('_method', config.method)\r\n    data = formData\r\n    method = LaravelMethod.POST\r\n  } else if (config.method === 'delete') {\r\n    data = {}\r\n    method = LaravelMethod.DELETE\r\n  }\r\n\r\n  const newConfig = {\r\n    ...config,\r\n    ...{\r\n      method,\r\n      params: config.params || {},\r\n      data,\r\n    }\r\n  }\r\n\r\n  if (newConfig.baseURL) {\r\n    newConfig.baseURL = formatURL(config)\r\n  }\r\n\r\n  return newConfig\r\n}\r\n\r\n/**\r\n * Merge default configs with user configs.\r\n * @param config\r\n */\r\nexport const mergeConfig = (config: LaraxiosRequestConfig): LaraxiosRequestConfig => {\r\n  return {\r\n    ...{\r\n      errorHandler: (error) => console.error('LARAVEL API ERROR: ' + (error?.response?.statusText || 'Unknown')),\r\n    },\r\n    ...config\r\n  }\r\n}\r\n","import { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios'\r\n\r\nexport interface LaraxiosRequestConfig extends AxiosRequestConfig {\r\n  errorHandler?: undefined | ErrorHandlerCallback\r\n}\r\n\r\nexport interface LaraxiosResponse<T = any, D = any> extends AxiosResponse {}\r\n\r\nexport type RequestDataValue =\r\n  Array<number | string | boolean | Blob>\r\n  | string\r\n  | number\r\n  | boolean\r\n  | Blob\r\n\r\nexport type RequestData = { [key: string]: RequestDataValue }\r\n\r\nexport enum LaravelMethod {\r\n  GET = 'get',\r\n  POST = 'post',\r\n  DELETE = 'delete'\r\n}\r\n\r\nexport interface ErrorHandlerCallback {\r\n  (error: AxiosError<any>): void\r\n}\r\n"],"names":[],"version":3,"file":"laraxios.js.map"}